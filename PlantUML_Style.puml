
'******************************************************************************

!ifndef FONTNAME
!define FONTNAME "sans-serif"
!endif

!ifndef FONTSIZE
!define FONTSIZE 11
!endif

'-----------------------------------------------------------------------------

!define DarkRed 8B0000
!define Teal 008080
!define DarkGreen 006400
!define MidnightBlue 191970
!define DarkSlateBlue 483D8B
!define Sienna A0522D
!define DarkGoldenrod B8860B
!define MediumVioletRed C71585
!define OliveDrab 6B8E23
!define DarkOliveGreen 556B2F

'-----------------------------------------------------------------------------

!ifdef STYLE_RG
!define ACCENT fff
!define ACCENTDARK 333
skinparam stereotypeCBackgroundColor ACCENTDARK
!define PRIMARY 000
!define SECONDARY 333
!define ARROWCOLOR 666
!define ARROWFONTCOLOR 333
!define BORDERCOLOR fff
!define BOXBG ddd
!define BACKGROUND fff
skinparam backgroundColor BACKGROUND
!endif

'-----------------------------------------------------------------------------
'-----------------------------------------------------------------------------

'******************************************************************************

'-----------------------------------------------------------------------------


'-----------------------------------------------------------------------------
'-----------------------------------------------------------------------------

'******************************************************************************

'-----------------------------------------------------------------------------

!procedure font_style()
 fontColor PRIMARY
 fontName FONTNAME
 fontSize FONTSIZE
 stereotypeFontColor SECONDARY
 stereotypeFontSize FONTSIZE
!endprocedure

!procedure color_style()
 fontColor<<RED>> DarkRed
 fontColor<<TEAL>> Teal
 fontColor<<GREEN>> DarkGreen
 fontColor<<BLUE>> MidnightBlue
 fontColor<<PURPLE>> DarkSlateBlue
 fontColor<<ORANGE>> Sienna
 fontColor<<GOLD>> DarkGoldenrod
 fontColor<<VIOLET>> MediumVioletRed
 fontColor<<OLIVE>> DarkOliveGreen
!endprocedure

!procedure basic_style()
 color_style()
 backgroundColor BOXBG
 borderColor BORDERCOLOR
!endprocedure

!procedure hidden_style()
 color_style()
 backgroundColor BACKGROUND
 borderColor BOXBG
 'borderColor BACKGROUND
!endprocedure

!procedure accent_style()p
 backgroundColor ACCENT
 borderColor ACCENTDARK
!endprocedure

!procedure  arrow_style()
 arrowColor ARROWCOLOR
 arrowFontName FONTNAME
 arrowFontColor ARROWFONTCOLOR
 arrowFontSize FONTSIZE
!endprocedure


'-----------------------------------------------------------------------------

' Activity diagrams

skinparam ActivityDiamondBackgroundColor BOXBG
skinparam ActivityDiamondBorderColor BORDERCOLOR
skinparam ActivityDiamondFontColor PRIMARY

skinparam PartitionBorderColor BORDERCOLOR
skinparam PartitionBackgroundColor BOXBG

'-----------------------------------------------------------------------------

' Class diagrams

skinparam circledCharacter {
 radius 8
 fontSize FONTSIZE
 fontName FONTNAME
}

skinparam class {
 basic_style()
 font_style()
 arrow_style()

 attributeFontColor SECONDARY
 attributeFontSize FONTSIZE
 attributeIconSize FONTSIZE
}

'-----------------------------------------------------------------------------

' Sequence diagrams

skinparam actor {
 accent_style()
 font_style()
}

skinparam participant {
 basic_style()
 font_style()
}

'-----------------------------------------------------------------------------

' Component diagrams

skinparam interface {
 accent_style()
 font_style()
}

skinparam component {
 basic_style()
 font_style()
}

skinparam agent {
 basic_style()
 font_style()
}

skinparam artifact {
 accent_style()
 font_style()
}

skinparam stack {
 basic_style()
 font_style()
}

skinparam package {
 basic_style()
 font_style()
}

skinparam file {
 basic_style()
 font_style()
}

skinparam card {
 hidden_style()
 font_style()
 defaultTextAlignment center
}

skinparam iframe {
 basic_style()
 font_style()
}

skinparam frame {
 basic_style()
 font_style()
}

skinparam folder {
 basic_style()
 font_style()
}

skinparam node {
 basic_style()
 font_style()
}

skinparam database {
 basic_style()
 font_style()
}

skinparam queue {
 basic_style()
 font_style()
}

'-----------------------------------------------------------------------------

' Use Case diagrams

skinparam usecase {
 hidden_style()
 font_style()
 arrow_style()
}

skinparam activity {
 basic_style()
 font_style()
 arrow_style()
}

skinparam sequence {
 font_style()
 arrow_style()

 lifeLineBorderColor ARROWCOLOR
 lifeLineBackgroundColor ARROWFONTCOLOR
}

skinparam boundary {
 accent_style()
 font_style()
}

skinparam control {
 accent_style()
 font_style()
}

skinparam entity {
 accent_style()
 font_style()
}

'-----------------------------------------------------------------------------

' State diagrams

skinparam state {
 basic_style()
 font_style()
 arrow_style()
 startColor ACCENT
 endColor ACCENTDARK
}

'-----------------------------------------------------------------------------

' Object diagrams

skinparam object {
 basic_style()
 font_style()
 arrow_style()
}

'-----------------------------------------------------------------------------

' Common

skinparam note {
 accent_style()
 font_style()
}

skinparam cloud {
 basic_style()
 font_style()
 arrow_style()
}

skinparam rectangle {
 accent_style()
 font_style()
}

skinparam storage {
 basic_style()
 font_style()
}
